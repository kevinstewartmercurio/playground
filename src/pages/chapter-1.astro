---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Chapter 1 | Playground">
  <main class="min-h-screen w-full">
    <div id="chapter-1-canvas-container" class="relative min-h-screen w-full">
      <canvas></canvas>
    </div>
  </main>
</Layout>

<script>
  import * as THREE from "three";
  import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
  import { RGBELoader } from "three/examples/jsm/loaders/RGBELoader.js";
  import GUI from "lil-gui";
  import gsap from "gsap";

  const canvasContainer = document.querySelector("#chapter-1-canvas-container");
  const canvas = document.querySelector("#chapter-1-canvas-container canvas");

  if (
    canvasContainer instanceof HTMLDivElement &&
    canvas instanceof HTMLCanvasElement
  ) {
    // debug ui
    const gui = new GUI();
    gui.hide();
    window.addEventListener("keydown", (e) => {
      if (e.key === "h") {
        gui.show(gui._hidden);
      }
    });

    // scene
    const scene = new THREE.Scene();

    const canvasDimensions = {
      width: canvasContainer.getBoundingClientRect().width,
      height: canvasContainer.getBoundingClientRect().height,
    };

    window.addEventListener("resize", () => {
      canvasDimensions.width = canvasContainer.getBoundingClientRect().width;
      canvasDimensions.height = canvasContainer.getBoundingClientRect().height;

      camera.aspect = canvasDimensions.width / canvasDimensions.height;
      camera.updateProjectionMatrix();

      renderer.setSize(canvasDimensions.width, canvasDimensions.height);
      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    });

    // camera
    const camera = new THREE.PerspectiveCamera(
      75,
      canvasDimensions.width / canvasDimensions.height,
      0.1,
      100,
    );
    camera.position.y = 5;
    camera.position.z = -12;
    camera.lookAt(0, 0, 0);
    scene.add(camera);

    // controls
    const controls = new OrbitControls(camera, canvas);
    controls.enableDamping = true;

    // environment map
    const rgbeLoader = new RGBELoader();
    rgbeLoader.load("/hdrs/studio.hdr", (envMap) => {
      envMap.mapping = THREE.EquirectangularReflectionMapping;

      scene.background = envMap;
      scene.environment = envMap;
    });

    // renderer
    const renderer = new THREE.WebGLRenderer({
      canvas: canvas,
    });
    renderer.setSize(canvasDimensions.width, canvasDimensions.height);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

    // balls
    const ball = new THREE.SphereGeometry(0.5, 32, 32);
    const ballMaterial = new THREE.MeshStandardMaterial({
      metalness: 1,
      roughness: 0.1,
    });

    const ballTweaks = gui.addFolder("ball / bar");
    ballTweaks.add(ballMaterial, "metalness").min(0).max(1).step(0.0001);
    ballTweaks.add(ballMaterial, "roughness").min(0).max(1).step(0.0001);
    ballTweaks.addColor(ballMaterial, "color");

    const [sphere1, sphere2, sphere3, sphere4, sphere5] = Array(5)
      .fill(null)
      .map(() => new THREE.Mesh(ball, ballMaterial));
    scene.add(sphere1, sphere2, sphere3, sphere4, sphere5);
    sphere1.position.x = -2;
    sphere2.position.x = -1;
    sphere4.position.x = 1;
    sphere5.position.x = 2;

    // base
    const baseLength = 6.75;
    const baseWidth = 3;
    const baseDepth = 0.25;
    const baseExtrudeShape = new THREE.Shape();
    baseExtrudeShape.moveTo(0, 0);
    baseExtrudeShape.lineTo(0, baseWidth);
    baseExtrudeShape.lineTo(baseLength, baseWidth);
    baseExtrudeShape.lineTo(baseLength, 0);
    baseExtrudeShape.lineTo(0, 0);
    const baseExtrudeSettings = {
      steps: 2,
      depth: baseDepth,
      bevelEnabled: true,
      bevelThickness: 0.15,
      bevelSize: 0.25,
      bevelOffset: 0,
      bevelSegments: 1,
    };

    const baseExtrudeGeometry = new THREE.ExtrudeGeometry(
      baseExtrudeShape,
      baseExtrudeSettings,
    );
    const baseMaterial = new THREE.MeshStandardMaterial({
      color: "black",
      metalness: 0.85,
      roughness: 0.1,
    });
    const baseExtrude = new THREE.Mesh(baseExtrudeGeometry, baseMaterial);
    const baseBox = new THREE.Mesh(
      new THREE.BoxGeometry(baseLength + 0.5, baseDepth, baseWidth + 0.5),
      baseMaterial,
    );
    scene.add(baseExtrude, baseBox);

    baseExtrude.position.x = -1 * (baseLength / 2);
    baseExtrude.position.y = -1.5;
    baseExtrude.position.z = -1 * (baseWidth / 2);
    baseExtrude.rotation.x = Math.PI / 2;
    baseBox.position.y = -1.8;

    const baseTweaks = gui.addFolder("base");
    baseTweaks.add(baseMaterial, "metalness").min(0).max(1).step(0.0001);
    baseTweaks.add(baseMaterial, "roughness").min(0).max(1).step(0.0001);
    baseTweaks.addColor(baseMaterial, "color");

    // tubes
    const tubeCurve1 = new THREE.LineCurve3(
      new THREE.Vector3(2.875, -1.5, -1),
      new THREE.Vector3(2.875, 2, -1),
    );
    const tube1 = new THREE.Mesh(
      new THREE.TubeGeometry(tubeCurve1, 20, 0.125, 8, false),
      ballMaterial,
    );
    const tubeCurve2 = new THREE.LineCurve3(
      new THREE.Vector3(2.375, 2.5, -1),
      new THREE.Vector3(-2.375, 2.5, -1),
    );
    const tube2 = new THREE.Mesh(
      new THREE.TubeGeometry(tubeCurve2, 20, 0.125, 8, false),
      ballMaterial,
    );
    const tubeCurve3 = new THREE.LineCurve3(
      new THREE.Vector3(-2.875, -1.5, -1),
      new THREE.Vector3(-2.875, 2, -1),
    );
    const tube3 = new THREE.Mesh(
      new THREE.TubeGeometry(tubeCurve3, 20, 0.125, 8, false),
      ballMaterial,
    );
    const tubeCurve4 = new THREE.LineCurve3(
      new THREE.Vector3(2.875, -1.5, 1),
      new THREE.Vector3(2.875, 2, 1),
    );
    const tube4 = new THREE.Mesh(
      new THREE.TubeGeometry(tubeCurve4, 20, 0.125, 8, false),
      ballMaterial,
    );
    const tubeCurve5 = new THREE.LineCurve3(
      new THREE.Vector3(2.375, 2.5, 1),
      new THREE.Vector3(-2.375, 2.5, 1),
    );
    const tube5 = new THREE.Mesh(
      new THREE.TubeGeometry(tubeCurve5, 20, 0.125, 8, false),
      ballMaterial,
    );
    const tubeCurve6 = new THREE.LineCurve3(
      new THREE.Vector3(-2.875, -1.5, 1),
      new THREE.Vector3(-2.875, 2, 1),
    );
    const tube6 = new THREE.Mesh(
      new THREE.TubeGeometry(tubeCurve6, 20, 0.125, 8, false),
      ballMaterial,
    );

    const angleCurve1 = new THREE.QuadraticBezierCurve3(
      new THREE.Vector3(2.875, 2, -1),
      new THREE.Vector3(2.875, 2.5, -1),
      new THREE.Vector3(2.375, 2.5, -1),
    );
    const angle1 = new THREE.Mesh(
      new THREE.TubeGeometry(angleCurve1, 20, 0.125, 8, false),
      ballMaterial,
    );
    const angleCurve2 = new THREE.QuadraticBezierCurve3(
      new THREE.Vector3(-2.875, 2, -1),
      new THREE.Vector3(-2.875, 2.5, -1),
      new THREE.Vector3(-2.375, 2.5, -1),
    );
    const angle2 = new THREE.Mesh(
      new THREE.TubeGeometry(angleCurve2, 20, 0.125, 8, false),
      ballMaterial,
    );
    const angleCurve3 = new THREE.QuadraticBezierCurve3(
      new THREE.Vector3(2.875, 2, 1),
      new THREE.Vector3(2.875, 2.5, 1),
      new THREE.Vector3(2.375, 2.5, 1),
    );
    const angle3 = new THREE.Mesh(
      new THREE.TubeGeometry(angleCurve3, 20, 0.125, 8, false),
      ballMaterial,
    );
    const angleCurve4 = new THREE.QuadraticBezierCurve3(
      new THREE.Vector3(-2.875, 2, 1),
      new THREE.Vector3(-2.875, 2.5, 1),
      new THREE.Vector3(-2.375, 2.5, 1),
    );
    const angle4 = new THREE.Mesh(
      new THREE.TubeGeometry(angleCurve4, 20, 0.125, 8, false),
      ballMaterial,
    );

    scene.add(
      tube1,
      tube2,
      tube3,
      tube4,
      tube5,
      tube6,
      angle1,
      angle2,
      angle3,
      angle4,
    );

    // strings
    const stringMaterialObj = {
      color: "#D9D9D9",
    };
    const stringMaterial = new THREE.MeshStandardMaterial({
      color: stringMaterialObj.color,
      transparent: true,
      opacity: 0.4,
    });

    const stringTweaks = gui.addFolder("string");
    stringTweaks.add(stringMaterial, "opacity").min(0).max(1).step(0.001);
    stringTweaks.addColor(stringMaterialObj, "color").onChange(() => {
      stringMaterial.color.set(stringMaterialObj.color);
    });

    let stringCurve11 = new THREE.LineCurve3(
      new THREE.Vector3(-2, 0, -0.125),
      new THREE.Vector3(-2, 2.375, -1),
    );
    const string11 = new THREE.Mesh(
      new THREE.TubeGeometry(stringCurve11, 20, 0.005, 8, false),
      stringMaterial,
    );
    let stringCurve12 = new THREE.LineCurve3(
      new THREE.Vector3(-2, 0, 0.125),
      new THREE.Vector3(-2, 2.375, 1),
    );
    const string12 = new THREE.Mesh(
      new THREE.TubeGeometry(stringCurve12, 20, 0.005, 8, false),
      stringMaterial,
    );
    const stringCurve21 = new THREE.LineCurve3(
      new THREE.Vector3(-1, 0, -0.125),
      new THREE.Vector3(-1, 2.375, -1),
    );
    const string21 = new THREE.Mesh(
      new THREE.TubeGeometry(stringCurve21, 20, 0.005, 8, false),
      stringMaterial,
    );
    const stringCurve22 = new THREE.LineCurve3(
      new THREE.Vector3(-1, 0, 0.125),
      new THREE.Vector3(-1, 2.375, 1),
    );
    const string22 = new THREE.Mesh(
      new THREE.TubeGeometry(stringCurve22, 20, 0.005, 8, false),
      stringMaterial,
    );
    const stringCurve31 = new THREE.LineCurve3(
      new THREE.Vector3(0, 0, -0.125),
      new THREE.Vector3(0, 2.375, -1),
    );
    const string31 = new THREE.Mesh(
      new THREE.TubeGeometry(stringCurve31, 20, 0.005, 8, false),
      stringMaterial,
    );
    const stringCurve32 = new THREE.LineCurve3(
      new THREE.Vector3(0, 0, 0.125),
      new THREE.Vector3(0, 2.375, 1),
    );
    const string32 = new THREE.Mesh(
      new THREE.TubeGeometry(stringCurve32, 20, 0.005, 8, false),
      stringMaterial,
    );
    const stringCurve41 = new THREE.LineCurve3(
      new THREE.Vector3(1, 0, -0.125),
      new THREE.Vector3(1, 2.375, -1),
    );
    const string41 = new THREE.Mesh(
      new THREE.TubeGeometry(stringCurve41, 20, 0.005, 8, false),
      stringMaterial,
    );
    const stringCurve42 = new THREE.LineCurve3(
      new THREE.Vector3(1, 0, 0.125),
      new THREE.Vector3(1, 2.375, 1),
    );
    const string42 = new THREE.Mesh(
      new THREE.TubeGeometry(stringCurve42, 20, 0.005, 8, false),
      stringMaterial,
    );
    let stringCurve51 = new THREE.LineCurve3(
      new THREE.Vector3(2, 0, -0.125),
      new THREE.Vector3(2, 2.375, -1),
    );
    const string51 = new THREE.Mesh(
      new THREE.TubeGeometry(stringCurve51, 20, 0.005, 8, false),
      stringMaterial,
    );
    let stringCurve52 = new THREE.LineCurve3(
      new THREE.Vector3(2, 0, 0.125),
      new THREE.Vector3(2, 2.375, 1),
    );
    const string52 = new THREE.Mesh(
      new THREE.TubeGeometry(stringCurve52, 20, 0.005, 8, false),
      stringMaterial,
    );

    scene.add(
      string11,
      string12,
      string21,
      string22,
      string31,
      string32,
      string41,
      string42,
      string51,
      string52,
    );

    // animation
    const updateString11 = () => {
      stringCurve11 = new THREE.LineCurve3(
        new THREE.Vector3(sphere1.position.x, sphere1.position.y, -0.125),
        new THREE.Vector3(-2, 2.375, -1),
      );

      string11.geometry.dispose();
      string11.geometry = new THREE.TubeGeometry(
        stringCurve11,
        20,
        0.005,
        8,
        false,
      );
    };
    const updateString12 = () => {
      stringCurve12 = new THREE.LineCurve3(
        new THREE.Vector3(sphere1.position.x, sphere1.position.y, 0.125),
        new THREE.Vector3(-2, 2.375, 1),
      );

      string12.geometry.dispose();
      string12.geometry = new THREE.TubeGeometry(
        stringCurve12,
        20,
        0.005,
        8,
        false,
      );
    };
    const updateString51 = () => {
      stringCurve51 = new THREE.LineCurve3(
        new THREE.Vector3(sphere5.position.x, sphere5.position.y, -0.125),
        new THREE.Vector3(2, 2.375, -1),
      );

      string51.geometry.dispose();
      string51.geometry = new THREE.TubeGeometry(
        stringCurve51,
        20,
        0.005,
        8,
        false,
      );
    };
    const updateString52 = () => {
      stringCurve52 = new THREE.LineCurve3(
        new THREE.Vector3(sphere5.position.x, sphere5.position.y, 0.125),
        new THREE.Vector3(2, 2.375, 1),
      );

      string52.geometry.dispose();
      string52.geometry = new THREE.TubeGeometry(
        stringCurve52,
        20,
        0.005,
        8,
        false,
      );
    };

    gsap
      .timeline({
        repeat: -1,
        repeatDelay: 0.065,
      })
      .to(sphere1.position, {
        duration: 0.75,
        ease: "power1.out",
        onUpdate: () => {
          updateString11();
          updateString12();
        },
        x: -4.5,
        y: 0.5,
      })
      .to(sphere1.position, {
        duration: 0.75,
        ease: "power2.in",
        onUpdate: () => {
          updateString11();
          updateString12();
        },
        x: -2,
        y: 0,
      })
      .to(sphere5.position, {
        delay: 0.065,
        duration: 0.75,
        ease: "power1.out",
        onUpdate: () => {
          updateString51();
          updateString52();
        },
        x: 4.5,
        y: 0.5,
      })
      .to(sphere5.position, {
        duration: 0.75,
        ease: "power2.in",
        onUpdate: () => {
          updateString51();
          updateString52();
        },
        x: 2,
        y: 0,
      });

    // tick
    // const clock = new THREE.Clock();
    const tick = () => {
      // const elapsedTime = clock.getElapsedTime();

      controls.update();
      renderer.render(scene, camera);
      window.requestAnimationFrame(tick);
    };

    tick();
  }
</script>
